#Interpolation Search

'''
* Elements shoul be  uniformly distributed and ordered

* formula:  return higher value of pos when element to be searched is
            closer to arr[hi]. And smaller value when closer to arr[lo]
    pos = lo + [ (x-arr[lo])*(hi-lo) / (arr[hi]-arr[Lo]) ]

*The Interpolation Search is an improvement over Binary Search for instances, where the values in a sorted array are **uniformly distributed**.
 Binary Search always goes to the middle element to check.
 On the other hand, interpolation search may go to different locations according to the value of the key being searched.
 For example, if the value of the key is closer to the last element, interpolation search is likely to start search toward the end side.

---Explanation
This a lgorithm tries to follow the way we search a name in a phone book, or a word in the dictionary.
We, humans, know in advance that in case the name we're searching starts with a "m", like "monk" for instance, we should start searching near the middle of the phone book.
Thus if we're searching the word "career" in the dictionary, you know that it should be placed somewhere at the beginning.
This is because we know the order of the letlers, we know the interval (a-z), and somehow we intuitively know that the words arc dispersed equally.
These facts arc enough to realize that the binary search can be a bad choice.
Indeed the binary search algorithm divides the list in two equal sub-lists, which is useless if we know in advance that lhe searched item is somewhere in I he beginning or the end of the list.

Whereas binary search starts in the middle and always divides into two, interpolation search calculates the likely position of the element and checks the index, making it more likely to find the element in a smaller number of iterations.

Yes, we can use also jump search if the item is al lhe beginning, bul not if it is at the encl, in that case Lhis algorithm is not so effeclive. 

* In interpolation-sequential search, interpolation is used to find an item near the one being searched for,
  then linear search is used to find the exact item

*Time Complexity: If elements are uniformly distributed, then O (log log n)).
                  In worst case it can take upto O(n). ( values of the keys increase exponentially)
Auxiliary Space: O(1)

'''
def interpolationSearch(arr, n, x):
    low = 0
    high = (n - 1)
    while low <= high and x >= arr[low] and x <= arr[high]:
        mid = low + int(
            ((float(high - low) / (arr[high] - arr[low])) * (x - arr[low])))
        if arr[mid] == x:
            return mid
        if arr[mid] < x:
            low = mid + 1
        else:
            high = mid - 1
    return -1
