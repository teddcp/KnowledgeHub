Ternary search

it is a divide-and-conquer search algorithm. It is mandatory for the array (in which you will search for an element) to be sorted before we begin the search. In this search, after each iteration it neglects â…“ part of the array and repeats the same operations on the remaining â…”.

Algorithm
The steps involved in this algorithm are:
(The list must be in sorted order)

Step 1: Divide the search space (initially, the list) in three parts (with two mid-points: mid1 and mid2)
Step 2: The target element is compared with the edge elements that is elements at location mid1, mid2 and the end of the search space. If element matches, go to step 3 else predict in which section the target element lies. The search space is reduced to 1/3rd. If the element is not in the list, go to step 4 or to step 1.
Step 3: Element found. Return index and exit.
Step 4: Element not found. Exit.


Complexity
Worst case time complexity: O(log N)
Average case time complexity: O(log N)
Best case time complexity: O(1)
Space complexity: O(1)


###ITERATIVE 
# Function to perform Ternary Search 
def ternarySearch(l, r, key, ar): 
    while r >= l: 
          
        # Find mid1 and mid2 
        mid1 = l + (r-l) // 3
        mid2 = r - (r-l) // 3
  
        # Check if key is at any mid 
        if key == ar[mid1]: 
            return mid1 
        if key == mid2: 
            return mid2 
  
        # Since key is not present at mid,  
        # Check in which region it is present 
        # Then repeat the search operation in that region 
        if key < ar[mid1]: 
            # key lies between l and mid1 
            r = mid1 - 1
        elif key > ar[mid2]: 
            # key lies between mid2 and r 
            l = mid2 + 1
        else: 
            # key lies between mid1 and mid2 
            l = mid1 + 1
            r = mid2 - 1
  
    # key not found 
    return -1
   
###########Recursive

def ternarySearch(arr, to_find):
    left = 0
# Function to perform Ternary Search 
def ternarySearch(l, r, key, ar): 
  
    if (r >= l): 
  
        # Find the mid1 and mid2 
        mid1 = l + (r - l) //3
        mid2 = r - (r - l) //3
  
        # Check if key is present at any mid 
        if (ar[mid1] == key):  
            return mid1 
          
        if (ar[mid2] == key):  
            return mid2 
          
        # Since key is not present at mid, 
        # check in which region it is present 
        # then repeat the Search operation 
        # in that region 
        if (key < ar[mid1]):  
  
            # The key lies in between l and mid1 
            return ternarySearch(l, mid1 - 1, key, ar) 
          
        elif (key > ar[mid2]):  
  
            # The key lies in between mid2 and r 
            return ternarySearch(mid2 + 1, r, key, ar) 
          
        else:  
  
            # The key lies in between mid1 and mid2 
            return ternarySearch(mid1 + 1,  
                                 mid2 - 1, key, ar) 
          
    # Key not found 
    return -1
