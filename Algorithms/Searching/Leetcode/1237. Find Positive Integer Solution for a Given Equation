Bruteforce :
O(x*y)

2 nested loops ...

Solution 2:

Time: O(x + y), space: O(1) excluding return list.
def findSolution(self, customfunction, z):
        """
        :type num: int
        :type z: int
        :rtype: List[List[int]]
        """
        res=[]
        l=1
        r=1000
        
        while l<1001 and r>0:
            val=customfunction.f(l,r)
            
            if val==z:
                res+=[[l,r]]
                l+=1
                r-=1
            
            elif val<z:
                l+=1
            else:
                r-=1
        return res
        
        
 Solution 3:
 Solution based on linear scan by one axis + binary search by second axis. Because function is increasing we can use binary search and limit next search to left of right halves depends on how f() and z are related.
Optimization catch is to make a check if the binary search make sense for one x at all - check at the beggining if f(x,1) < z < f(x,1000) and skip the whole iteration otherwise.

O(1) for time because we do xlgy iterations, but x and y are defined as 1<=x,y<=1000, thus 1000xlg1000 = O(1). O(1) space - jsut several state variables.

###BINAR SEARCH  xlogy
def findSolution(self, customfunction, z):
        """
        :type num: int
        :type z: int
        :rtype: List[List[int]]
        """
        res=[]
        
        
        for i in range(1,1001):
	    ######CATCH#####
	    if customfunction.f(i,1)>z or  customfunction.f(i,1000)<z :
                break
		
		
            l=1
            r=1000
            while l<=r:
                m=(l+r)//2
                val=customfunction.f(i,m)
                if val==z:
                    res+=[[i,m]]
                    break
                elif val<z:
                    l=m+1
                else:
                    r=m-1
        return res
