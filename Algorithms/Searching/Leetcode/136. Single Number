Approach 1: List operation 
Algorithm

Iterate over all the elements in \text{nums}nums
If some number in \text{nums}nums is new to array, append it
If some number is already in the array, remove it
    class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        no_duplicate_list = []
        for i in nums:
            if i not in no_duplicate_list:
                no_duplicate_list.append(i)
            else:
                no_duplicate_list.remove(i)
        return no_duplicate_list.pop()
 
 Complexity Analysis

Time complexity : O(n^2)
Space complexity : O(n)

Solution2 :Hashing
    class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        hash_table = {}
        for i in nums:
            try:
                hash_table.pop(i)
            except:
                hash_table[i] = 1
        return hash_table.popitem()[0]
        
 
 Solution3:
 2∗(a+b+c)−(a+a+b+b+c)=c
     return 2 * sum(set(nums)) - sum(nums)
 
 Solution4:
 Time complexity : O(n + n) = O(n) sum will call next to iterate through \text{nums}nums. We can see it as sum(list(i, for i in nums)) which means the time complexity is O(n)O(n) because of the number of elements(nn) in \text{nums}nums.
Space complexity : O(n + n) = O(n)set needs space for the elements in nums

Approach 5: Bit Manipulation
Concept

1.If we take XOR of zero and some bit, it will return that bit  a xor 0 =a
2.If we take XOR of two same bits, it will return 0     a xor a = 0

a xor b xor a = (a xor a) xor b = 0 xor b =b    {  a⊕b⊕a=(a⊕a)⊕b=0⊕b=b  }
So we can XOR all bits together to find the unique number.

       a = 0
        for i in nums:
            a ^= i
        return a


