Logic:

All the elements to the left of inflection point > first element of the array.
All the elements to the right of inflection point < first element of the array.

1. [6701245]. let its be an array (rotated less than half time) => pivolt will lie in right part, hence minium
   [mid:end] is sorted , hence min wont lie in [mid+1:end].We have to look in [Start:mid]
   mid is considered as there is a possibility that mid is a minium element
   
2.[2,4,5,6,7,0,1] rotated more tha half time => pivolt will lie in right part, hecne the minimum
  [start:mid] is sorted, so min wont lie in [s:mid]; we will look in [mid+1:end]
  
Base cases:
 start==end  => min=start
 start+1=end  => mid will also referto start, min=min(mid,end) which can break into 1 and 2 (above)
-------------------------------------------------------------------------------------------------------------------- 
 class Solution(object):
    def findMin(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        l=0
        r=len(nums)-1
        
        while l<r:   #or nums[l]>nums[r] => we have to make it as num[l]<num[r]  
            #we can add here one condition : if num[l]<num[r],return num[l]
            #or if r-l==1: return nums[r]    #min(nums[l],nums[r])
            
                m=(l+r)>>1
                
                if nums[m]<nums[r]:
                        r=m
                else:
                        l=m+1
        #l=r        
        return nums[l]
 
