same as 153, but here duplicates can ocurr. 

if mid==end, we cant determine which side to go. i.e min is in left or right
so, we can skip the end element i.e end--

proof: let end is the minium elemnt i.e mid==end==min.Even if we skip the end element, we can still get out minium element  via mid.

so,a[m]==a[end] , we will look in a[s:m-1]

ex: 3123333,3333123
-------------------------------------------------------
Complexity will be o(n), as in the worst case, if all the element are same, we have to decrement end n time.

class Solution(object):
    def findMin(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        l=0
        r=len(nums)-1

        while l<r:  
            
                m=(l+r)>>1
                
                if nums[m]<nums[r]:
                    r=m
                elif nums[m]>nums[r]:
                    l=m+1
                else:
                    r-=1  #Here the change
                
        return nums[l]
