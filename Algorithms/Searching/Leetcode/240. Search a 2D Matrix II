

Solution1 : O(nm)
2 nested loops


solution2: O(mlgn)

1.for each row do binary search 
2.length of each row is n, hence search will take lgn. for m rows, it is mlgn

     def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
        if len(matrix)==0 or len(matrix[0])==0 : 
            return False
        
        ans=False
        for row in matrix:
            if ans==True or row[0]>target:
                return ans
            ans=self.rowSearch(row,target)
        return ans    
            
    
    def rowSearch(self, row, target):
        left, right = 0, len(row)-1
        while left <= right:
            mid = (left + right) // 2
            cur = row[mid]
            
            if cur == target:
                return True
            elif cur < target:
                left = mid + 1
            else:
                right = mid - 1
        return False
        ---------------------------
Solution 3: O(m+n)
Intsted of going to each row, we can take the right corner element and can decide the element's position

Let’s start our search from the top-right corner of the array. There are three possible cases.

1.The number we are searching for is greater than the current number. This will ensure, that all the elements in the current row is       smaller than the number we are searching for as we are already at the right-most element and the row is sorted. Thus, the entire row     gets eliminated and we continue our search on the next row. Here elimination means we won’t search on that row again.

2.The number we are searching for is smaller than the current number. This will ensure, that all the elements in the current column is     greater than the number we are searching for. Thus, the entire column gets eliminated and we continue our search on the previous         column i.e. the column at the immediate left.

3. The number we are searching for is equal to the current number. This will end our search.

    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
        if len(matrix)==0 or len(matrix[0])==0 : 
            return False
        
        r=0
        c=len(matrix[0])-1
        
        while r<len(matrix) and c>=0:
            
            if matrix[r][c]==target :
                return True
            elif matrix[r][c] < target:
                r+=1
            else:
                c-=1
        
        
        return False
        
  Oneline in python: O(mn)
  
  def searchMatrix(self, matrix, target):
    return any(target in row for row in matrix)
