
Solution 1: sorting nlgn
      class Solution:
    def missingNumber(self, nums):
        nums.sort()

        # Ensure that n is at the last index
        if nums[-1] != len(nums):
            return len(nums)
        # Ensure that 0 is at the first index
        elif nums[0] != 0:
            return 0

        # If we get here, then the missing number is on the range (0, n)
        for i in range(1, len(nums)):
            expected_num = nums[i-1] + 1
            if nums[i] != expected_num:
                return expected_num
 
 Solution 2 : hashing O(n) tc and sc both
 
      class Solution:
    def missingNumber(self, nums):
        num_set = set(nums)
        n = len(nums) + 1
        for number in range(n):
            if number not in num_set:
                return number
 
 Solution3 : xor O(n)
  
      def missingNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        x=0
        n=len(nums)+1
        for i in range(0,n):
            x^=i
        for i in nums:
            x^=i
        return x
        
Solution 4 : O(n) Gauss formula
 âˆ‘ (i=0,n)  i=  n(n+1)/2 

Algorithm

We can compute the sum of nums in linear time, and by Gauss' formula, we can compute the sum of the first nn natural numbers in constant time. Therefore, the number that is missing is simply the result of Gauss' formula minus the sum of nums, as nums consists of the first nn natural numbers minus some number.     
        
    class Solution:
    def missingNumber(self, nums):
        expected_sum = len(nums)*(len(nums)+1)//2
        actual_sum = sum(nums)
        return expected_sum - actual_sum       
