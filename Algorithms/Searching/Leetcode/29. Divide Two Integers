
solution 1: Brute Force 
      def divide(dividend, divisor):  
  
    # Calculate sign of divisor i.e., 
    # sign will be negative only iff 
    # either one of them is negative 
    # otherwise it will be positive 
    sign = -1 if ((dividend < 0) ^  (divisor < 0)) else 1
      
    # Update both divisor and 
    # dividend positive 
    dividend = abs(dividend) 
    divisor = abs(divisor) 
      
    # Initialize the quotient 
    quotient = 0
    while (dividend >= divisor):  
        dividend -= divisor 
        quotient += 1
      
      
    return sign * quotient 
  
  
  
  
  Solution 2: Binary Search 
            res=0
        l=0
        r=dividend
        
        while l<=r:
            m=(l+r)//2
            
            if m*divisor== dividend:
                res=m
                break
            elif m*divisor<dividend:
                res=m
                l=m+1
            else:
                r=m-1
        return res*sign
        
Solution 3:  (log(dividend/divisor))^2
      def divide(self, dividend, divisor):
        """
        :type dividend: int
        :type divisor: int
        :rtype: int
        """
        if divisor == 0 or (dividend == -2147483648  and divisor == -1)  :
            return 2147483647
        
        sign = 1 if (dividend > 0 and divisor > 0) or (dividend < 0 and divisor < 0) else -1
        dividend = abs(dividend)
        divisor = abs(divisor)
        q=0
        
        while dividend>=divisor:
            t=0;k=divisor
            while dividend>=k:
                dividend-=k
                k<<=1
                q+=1<<t
                t+=1
        return q*sign
        

solution 4:

class Solution(object):
    def divide(self, dividend, divisor):
        """
        :type dividend: int
        :type divisor: int
        :rtype: int
        """
        if divisor == 0 or (dividend == -2147483648  and divisor == -1)  :
            return 2147483647
        if divisor == 1 : 
            return dividend
        if divisor == -1 : 
            return -dividend
        
        sign = 1 if (dividend > 0 and divisor > 0) or (dividend < 0 and divisor < 0) else -1
        dd = abs(dividend)
        dr = abs(divisor)
        
        x=dr
        c=0
        b=1

        #find the maxium number of time we need to iterate over dividend
        #by increasing divisor exponentially

        #it will run lgx time
        while dd>=x:
                c+=1
                b=b<<1
                x*=2

                if x*2>dd:
                        break
                
        #print(x,b,c)

        q=0

        #will run c time i.e lgx time
        for i in range(c,-1,-1):
                if dd>=x:
                        dd-=x
                        q+=b
                x//=2
                b//=2
                
        return q*sign

        '''
        total time complexity will be 2lgx i.e lgx
        '''
                
            
