We are playing the Guess Game. The game is as follows:

I pick a number from 1 to n. You have to guess which number I picked.

Every time you guess wrong, I'll tell you whether the number is higher or lower.

You call a pre-defined API guess(int num) which returns 3 possible results (-1, 1, or 0):

-1 : My number is lower
 1 : My number is higher
 0 : Congrats! You got it!
Example :

Input: n = 10, pick = 6
Output: 6

Solution 1: o(n)
for i in range(1,n):
            if guess(i)==0:
                return i
        return n
 
 Solution 2: Binary Search
 def guessNumber(self, n):
        """
        :type n: int
        :rtype: int
        """
        l=0
        h=n
        
        while l<=h:
            m=(l+h)>>1
            x=guess(m)
            
            if x==0:
                return m
            elif x==-1:
                h=m-1
            else:
                l=m+1
        return -1
        
  Solution3 #Ternary Search
  
            def guessNumber(self, n):
                  """
                  :type n: int
                  :rtype: int
                  """
                  low=1
                  high=n

                  while low<=high:
                      mid1 = low + (high - low) / 3;
                      mid2 = high - (high - low) / 3;

                      res1 = guess(mid1)
                      res2 = guess(mid2)

                      if (res1 == 0):
                          return mid1
                      if (res2 == 0):
                          return mid2
                      elif (res1 < 0) :
                          high = mid1 - 1
                      elif (res2 > 0) :
                          low = mid2 + 1
                      else :
                          low = mid1 + 1
                          high = mid2 - 1
                  return -1

Follow up
It seems that ternary search is able to terminate earlier compared to binary search. But why is binary search more widely used?

Comparisons between Binary Search and Ternary Search
Ternary Search is worse than Binary Search. The following outlines the recursive formula to count comparisons of Binary Search in the worst case.

Binary Search : T(n)=t(n/2)+2
               number of comparisions :1+2log_2 n

ternary Search : T(n)=T(n/3)+4
                  comparisions :1+4log_3n
   As shown above, the total comparisons in the worst case for ternary and binary search are 1 + 4 \log_3 n1+4log 3n and 1 + 2 \log_2 n1+2log 2 n comparisons respectively. To determine which is larger, we can just look at the expression 2 \log_3 n2log 
3​	n and \log_2 nlog 
2​	 n .  . Since the value of \frac{2}{\log_2 3}  is greater than one, Ternary Search does more comparisons than Binary Search in the worst case.

https://leetcode.com/articles/guess-number-higher-or-lower/
