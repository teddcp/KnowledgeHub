Implement int sqrt(int x).
Compute and return the square root of x, where x is guaranteed to be a non-negative integer.
Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.

Solution 1: //Binary search
         def mySqrt(self, x: int) -> int:
                s=0
                e=x
                ans=0
                while s<=e :
                    m=(s+e)//2
                    sq=m*m

                    if sq==x:
                        return m
                    elif sq<x:
                        ans=m
                        s=m+1
                    else:
                        e=m-1

                return ans
 
 solution 2:
          def mySqrt(self, x: int) -> int:
                s=0
                e=x  #you can make it x//2 +1

                while s<=e :
                    m=s+(e-s)//2
                    sq=m*m

                    if sq<=x:
                        s=m+1
                    else:
                        e=m-1

                return s-1
 
 Solution3 //n^1.5 Approach
 def mySqrt(self, x: int) -> int:
        i=1
        
        while i*i<=x :
            i+=1
        
        return i-1
 
 Solution 4 #Babylonian Approach logn
 def mySqrt(self, x: int) -> int:
        a=x
        b=1
        
        e=0.000001
        
        while a-b > e:
            a=(a+b)//2
            b=x/a
        
        return int(a)
  or |||||||||||||||||||||||||||||||||||||||
   t=x
        
        while t**2 >x :
            t=int(0.5 *(t+(x//t)))
        
        return t
       ----------------------------------------
   Using Logarithimic
       pow(2, 0.5 * math.log2(n))
       
     Explanation:
     let d be our answer for input number n
        then n(1/2) = d 
     apply log2 on both sides
      log2(n(1/2)) = log2(d)
      log2(d) = 1/2 * log2(n)
      d = 2(1/2 * log2(n)) 
      d = pow(2, 0.5*log2(n)) 
      
      
 #############################################################33
 If the question asks, to find the real integer square, we have to find the precision also
 
 1. find the integral sqrt part as above
 2.find the precision
 
             # For computing the fractional part 
             # of square root upto given precision 
             increment = 0.1
             for i in range(0, precision):  
                 while (ans * ans <= number): 
                     ans += increment 

                 # loop terminates when ans * ans > number 
                 ans = ans - increment 
                 increment = increment / 10
                 
 #O(log(number) + precision) which is approximately equal to O(log(number)).
    
 
