Implement int sqrt(int x).
Compute and return the square root of x, where x is guaranteed to be a non-negative integer.
Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.

Solution 1: //Binary search
         def mySqrt(self, x: int) -> int:
                s=0
                e=x
                ans=0
                while s<=e :
                    m=(s+e)//2
                    sq=m*m

                    if sq==x:
                        return m
                    elif sq<x:
                        ans=m
                        s=m+1
                    else:
                        e=m-1

                return ans
 
 solution 2:
          def mySqrt(self, x: int) -> int:
                s=0
                e=x  #you can make it x//2 +1

                while s<=e :
                    m=s+(e-s)//2
                    sq=m*m

                    if sq<=x:
                        s=m+1
                    else:
                        e=m-1

                return s-1
 
 Solution3 //n^1.5 Approach
 def mySqrt(self, x: int) -> int:
        i=1
        
        while i*i<=x :
            i+=1
        
        return i-1
 
 Solution 4 #Babylonian Approach loglogn ??Doubt
 def mySqrt(self, x: int) -> int:
        a=x
        b=1
        
        e=0.000001
        
        while a-b > e:
            a=(a+b)//2
            b=x/a
        
        return int(a)
    
    
 
