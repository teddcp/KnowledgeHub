in-place
comparsion bases
internal type
unstable algo
non-recursive

for any index i,
    left node is 2*i +1
    right node is 2*i+2
    parent node is i//2-1
    
    

def heapify(a,n,i):

    largest=i
    left=2*i+1
    right=2*i+2
    
    if left<n and a[i]<a[left]:
        largest=left
    if right<n and a[largest]<a[right]:
        largest=right

    if largest!=i:
        a[largest],a[i]=a[i],a[largest]
        heapify(a,n,largest)
        



def sort(a,n) :

    #Build a max heap
    for i in range(n//2-1,-1,-1):
        heapify(a,n,i)
        
    #swap the root and last element and call heapify
    for i in range(n-1,0,-1):
        a[i],a[0]=a[0],a[i]
        heapify(a,i,0)

    return  a

print(sort([3,4,1,7,2,9,0],7))


heapify takes lgn times as height of a treee of n elements is lgn.
Build max heap takes n*lgn -->nlgn
swapping the rrot and calling heapify takes nlgn time

so overall it takes nlgn in all cases and spe complexity is o(1)



https://www.programiz.com/dsa/heap-sort
https://medium.com/basecs/heapify-all-the-things-with-heap-sort-55ee1c93af82
https://www.interviewcake.com/concept/java/heapsort
