Comparison:

Hoare’s scheme is more efficient than Lomuto’s partition scheme because it does three times fewer swaps on average, and it creates efficient partitions even when all values are equal.

Like Lomuto’s partition scheme, Hoare partitioning also causes Quicksort to degrade to O(n^2) when the input array is already sorted, it also doesn’t produce a stable sort.

Note that in this scheme, the pivot’s final location is not necessarily at the index that was returned, and the next two segments that the main algorithm recurs on are (lo..p) and (p+1..hi) as opposed to (lo..p-1) and (p+1..hi) as in Lomuto’s scheme.



def partition(nums, low, high):
    # We select the middle element to be the pivot. Some implementations select
    # the first element or the last element. Sometimes the median value becomes
    # the pivot, or a random one. There are many more strategies that can be
    # chosen or created.
    
    #pivot = nums[(low + high) // 2]
    pivot=nums[low]

    i = low - 1
    j = high + 1

    while True:
        
        i += 1
        while nums[i] < pivot:
            i += 1
        
        j -= 1
        while nums[j] > pivot:
            j -= 1
        
        if i >= j:
            return j

        # If an element at i (on the left of the pivot) is larger than the
        # element at j (on right right of the pivot), then swap them
        nums[i], nums[j] = nums[j], nums[i]


def quick_sort(nums):
    # Create a helper function that will be called recursively
    def _quick_sort(items, low, high):
        if low < high:
            # This is the index after the pivot, where our lists are split
            split_index = partition(items, low, high)
            _quick_sort(items, low, split_index)
            _quick_sort(items, split_index + 1, high)

    _quick_sort(nums, 0, len(nums) - 1)


# Verify it works
random_list_of_nums = [3,7,8,5,2,1,9,5,4]
quick_sort(random_list_of_nums)
print(random_list_of_nums)




For randomized version, we can proceeed like we did in lamuto's.

1.select an index randomly and swap it with first element
2.then call partition 
3.Rest are same


Links
https://cs.stackexchange.com/questions/97727/hoare-partitioning-scheme-in-quicksort
https://stackoverflow.com/questions/39665299/understanding-quicksort
