

#3-median rule : median of first,last and middle
def get_pivot(nums,low,high):
    mid=(high+low)//2
    pivot=high

    if nums[low]<nums[mid]:
        if nums[mid]<nums[high]:
            pivot=mid
    elif nums[low]<nums[high]:
            pivot=low
    
    return pivot


def partition(nums, low, high):
    # We select the middle element to be the pivot. Some implementations select
    # the first element or the last element. Sometimes the median value becomes
    # the pivot, or a random one. There are many more strategies that can be
    # chosen or created.
    
    #pivot = nums[(low + high) // 2]
    pivot=nums[get_pivot(nums,low,high)]    #----->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>ONLY CHANGE

    i = low - 1
    j = high + 1

    while True:
        
        i += 1
        while nums[i] < pivot:
            i += 1
        
        j -= 1
        while nums[j] > pivot:
            j -= 1
        
        if i >= j:
            return j

        # If an element at i (on the left of the pivot) is larger than the
        # element at j (on right right of the pivot), then swap them
        nums[i], nums[j] = nums[j], nums[i]
